(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{535:function(t,a,s){"use strict";s.r(a);var e=s(8),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[s("img",{attrs:{src:"/images/2019/12/01/4.jpeg",alt:"",width:"1200",height:"562",loading:"lazy"}})]),t._v(" "),s("h3",{attrs:{id:"_2019-07-10-什么是-bff-有哪些应用-✅"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2019-07-10-什么是-bff-有哪些应用-✅"}},[t._v("#")]),t._v(" 2019-07-10: 什么是 BFF，有哪些应用 ✅")]),t._v(" "),s("details",[s("summary",[t._v("好好想想先 😌 ")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("参考链接")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.jianshu.com/p/bb8ac7db7e2d",target:"_blank",rel:"noopener noreferrer"}},[t._v("大前端架构思考与选择"),s("OutboundLink")],1)])])]),t._v(" "),s("li",[s("strong",[t._v("一句话")]),t._v(" "),s("ul",[s("li",[t._v("BFF(Backend for Frontends，为前端而存在的后端)\n"),s("ul",[s("li",[t._v("从服务器来的数据当做 Model，在 BFF 中针对各种端，提供不同的 ViewModel。如果数据变了，只要修改 Model 就可以了。如果要增加一种端，只要增加一个 ViewModel 就可以了。在这里集中修改，就可以解放各个终端的格式转化工作。")])])]),t._v(" "),s("li",[t._v("API 网关\n"),s("ul",[s("li",[t._v("API 网关是一个服务器，是系统的唯一入口。从面向对象设计的角度看，它与外观模式类似。API 网关封装了系统内部架构，为每个客户端提供一个定制的 API。它可能还具有其它职责，如身份验证、监控、负载均衡、缓存、请求分片与管理、静态响应处理。API 网关方式的核心要点是，所有的客户端和消费端都通过统一的网关接入微服务，在网关层处理所有的非业务功能。通常，网关也是提供 REST/HTTP 的访问 API。服务端通过 API-GW 注册和管理服务。")])])])])])])]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_2019-07-09-redux-的一些概念-💊✅"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2019-07-09-redux-的一些概念-💊✅"}},[t._v("#")]),t._v(" 2019-07-09: Redux 的一些概念 💊✅")]),t._v(" "),s("ul",[s("li",[t._v("createStore, combineReducers, bindActionCreators, applyMiddleware, compose")]),t._v(" "),s("li",[t._v("store, action, reducer, mapStateToProps, mapDispatchToProps, connect, container")])]),t._v(" "),s("details",[s("summary",[t._v("好好想想先 😌 ")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("参考链接")])]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.redux.org.cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redux 中文文档"),s("OutboundLink")],1)])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("一句话")])]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("createStore(reducer, [preloadedState], enhancer)")]),t._v(" => 创建一个 Redux store 来以存放应用中所有的 state。应用中应有且仅有一个 store。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("combineReducers(reducers)")]),t._v(" => 把一个由多个不同 reducer 函数作为 value 的 object，合并成一个最终的 reducer 函数")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("applyMiddleware(...middlewares)")]),t._v(" => Middleware 可以让你包装 store 的 dispatch 方法来达到你想要的目的")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("compose(fn1, fn2, fn3, ...)")]),t._v(" => 等同于 "),s("code",[t._v("fn1(fn2(fn3(...)))")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("store")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("getState()")]),t._v(" => 返回应用当前的 state 树。")]),t._v(" "),s("li",[s("code",[t._v("dispatch(action)")]),t._v(" => 分发 action。这是触发 state 变化的惟一途径。")]),t._v(" "),s("li",[s("code",[t._v("subscribe(listener)")]),t._v(" => 添加一个变化监听器。")]),t._v(" "),s("li",[s("code",[t._v("replaceReducer(nextReducer)")]),t._v(" => 替换 store 当前用来计算 state 的 reducer。")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("action")]),t._v("\naction must be a plain object")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("addTodo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("text")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ADD_TODO'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" nextTodoId"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  text\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("reducer")]),t._v("\nreducer 必须为纯函数")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("visibilityFilter")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" VisibilityFilters"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SHOW_ALL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" action")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("action"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'SET_VISIBILITY_FILTER'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" action"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("filter\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" state\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("mapStateToProps")]),t._v("\n创建映射关系，可在此处进行 computed")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("getVisibleTodos")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("todos"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" filter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" VisibilityFilters"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SHOW_ALL")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" todos\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" VisibilityFilters"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SHOW_COMPLETED")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" todos"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("t")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("completed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" VisibilityFilters"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SHOW_ACTIVE")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" todos"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("t")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("completed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Unknown filter: '")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" filter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("mapStateToProps")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("todos")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getVisibleTodos")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("todos"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("visibilityFilter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("mapDispatchToProps")]),t._v("\n避免对组件的侵入性")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("mapDispatchToProps")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("dispatch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("toggleTodo")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toggleTodo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("bindActionCreators(ActionCreators, dispatch)")]),t._v("\nredux 静态方法，用于将 "),s("code",[t._v("action")]),t._v(" 转化成方法，省略 "),s("code",[t._v("dispatch")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("connect")]),t._v("\n注入属性到组件")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("connect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mapStateToProps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mapDispatchToProps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TodoList"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])])])])]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_2019-07-08-addeventlistener-的第三个参数有什么作用-✅"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2019-07-08-addeventlistener-的第三个参数有什么作用-✅"}},[t._v("#")]),t._v(" 2019-07-08: addEventListener 的第三个参数有什么作用 ✅")]),t._v(" "),s("details",[s("summary",[t._v("好好想想先 😌 ")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("参考链接")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.jianshu.com/p/37c50041783b",target:"_blank",rel:"noopener noreferrer"}},[t._v("关于 JavaScript 的 addEventListener 第三个参数的注记"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.cnblogs.com/bfgis/p/5460191.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript 详说事件机制之冒泡、捕获、传播、委托"),s("OutboundLink")],1)])])]),t._v(" "),s("li",[s("strong",[t._v("一句话")]),t._v(" "),s("ul",[s("li",[t._v("事件的捕获阶段和冒泡阶段\n"),s("ul",[s("li",[t._v("先从最外面开始（也就是 window 开始）向内推进，直到定位到触发的元素 text。这一过程叫“捕获过程”")]),t._v(" "),s("li",[t._v("然后从该元素开始，又向上级冒泡。该过程为“冒泡过程”")]),t._v(" "),s("li",[t._v("执行顺序："),s("code",[t._v("window -> document -> ... -> target")]),t._v(" "),s("code",[t._v("target -> ... -> document -> window")])])])]),t._v(" "),s("li",[t._v("第三个参数为 isCapture 是否在捕获阶段执行回调。默认为 false")])])])])]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_2019-07-07-virtual-dom-diff-算法-💊✅"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2019-07-07-virtual-dom-diff-算法-💊✅"}},[t._v("#")]),t._v(" 2019-07-07: Virtual Dom diff 算法 💊✅")]),t._v(" "),s("details",[s("summary",[t._v("好好想想先 😌 ")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("参考链接")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/20346379",target:"_blank",rel:"noopener noreferrer"}},[t._v("Virtual DOM 背后的秘密（Diff 篇）"),s("OutboundLink")],1)])])]),t._v(" "),s("li",[s("strong",[t._v("一句话")]),t._v(" "),s("ul",[s("li",[t._v("tree diff\n"),s("ul",[s("li",[t._v("React 对树的算法进行了简洁明了的优化，即对树进行分层比较，两棵树只会对同一层次的节点进行比较")])])]),t._v(" "),s("li",[t._v("component diff\n"),s("ul",[s("li",[t._v("如果是同一类型的组件，按照原策略继续比较 virtual DOM tree")]),t._v(" "),s("li",[t._v("如果不是，则将该组件判断为 dirty component，从而替换整个组件下的所有子节点")])])]),t._v(" "),s("li",[t._v("element diff\n"),s("ul",[s("li",[t._v("INSERT_MARKUP，新的 component 类型不在老集合里， 即是全新的节点，需要对新节点执行插入操作。")]),t._v(" "),s("li",[t._v("MOVE_EXISTING，在老集合有新 component 类型，且 element 是可更新的类型，generateComponentChildren 已调用 receiveComponent，这种情况下 prevChild=nextChild，就需要做移动操作，可以复用以前的 DOM 节点。")]),t._v(" "),s("li",[t._v("REMOVE_NODE，老 component 类型，在新集合里也有，但对应的 element 不同则不能直接复用和更新，需要执行删除操作，或者老 component 不在新集合里的，也需要执行删除操作。")]),t._v(" "),s("li",[t._v("key 绑定元素")])])])])])])]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_2019-07-06-http2-的优点-✅"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2019-07-06-http2-的优点-✅"}},[t._v("#")]),t._v(" 2019-07-06: Http2 的优点 ✅")]),t._v(" "),s("details",[s("summary",[t._v("好好想想先 😌 ")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("参考链接")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://juejin.im/post/5aaccf8f51882555784dbabc",target:"_blank",rel:"noopener noreferrer"}},[t._v("http2 简介"),s("OutboundLink")],1)])])]),t._v(" "),s("li",[s("strong",[t._v("一句话")]),t._v(" "),s("ul",[s("li",[t._v("二进制分帧\n"),s("ul",[s("li",[t._v("http/1.x 是一个文本协议，http2 是二进制协议")]),t._v(" "),s("li",[t._v("http2 的二进制协议被称之为二进制分帧")]),t._v(" "),s("li",[t._v("http2 协议的格式为帧，类似 TCP 中的数据报文。")])])]),t._v(" "),s("li",[t._v("头部压缩\n"),s("ul",[s("li",[t._v("在 http/1.x 协议中，每次请求都会携带 header 数据，而类似 User-Agent, Accept-Language 等信息在每次请求过程中几乎是不变的，那么这些信息在每次请求过程中就变成了浪费。")]),t._v(" "),s("li",[t._v("http2 中提出了一个 HPACK 的压缩方式，用于减少 http header 在每次请求中消耗的流量。")])])]),t._v(" "),s("li",[t._v("多路复用\n"),s("ul",[s("li",[t._v("在 http/1.x 情况下，浏览器会限制同一个域名下并发请求的个数。")]),t._v(" "),s("li",[t._v("在 http/1.x 的情况下，一个常见的优化手段是把静态资源分布到不同域名下，以此来突破浏览器并发数的限制。")]),t._v(" "),s("li",[t._v("在 http2 的情况下，所有的请求都会共用一个 TCP 连接，这个可以说是 http2 杀手级的特性了。")])])])])])])]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_2019-07-05-tcp-和-udp-原理和区别-✅"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2019-07-05-tcp-和-udp-原理和区别-✅"}},[t._v("#")]),t._v(" 2019-07-05: TCP 和 UDP 原理和区别 ✅")]),t._v(" "),s("details",[s("summary",[t._v("好好想想先 😌 ")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("参考链接")])]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://juejin.im/post/583d2d6a67f356006bb7d535",target:"_blank",rel:"noopener noreferrer"}},[t._v("TCP 和 UDP"),s("OutboundLink")],1)])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("一句话")])]),t._v(" "),s("ul",[s("li",[t._v("UDP 的优点\n"),s("ul",[s("li",[t._v("无需建立连接（减少延迟）")]),t._v(" "),s("li",[t._v("实现简单：无需维护连接状态")]),t._v(" "),s("li",[t._v("头部开销小（最小值为 8byte）")]),t._v(" "),s("li",[t._v("没有拥塞控制：应用可以更好的控制发送时间和发送速率")])])]),t._v(" "),s("li",[t._v("TCP UDP 区别\n"),s("ul",[s("li",[t._v("TCP 是面向连接(Connection oriented)的协议，UDP 是无连接(Connection less)协议；TCP 用三次握手建立连接：1) Client 向 server 发送 SYN；2) Server 接收到 SYN，回复 Client 一个 SYN-ACK；3) Client 接收到 SYN_ACK，回复 Server 一个 ACK。到此，连接建成。UDP 发送数据前不需要建立连接。")]),t._v(" "),s("li",[t._v("TCP 可靠，UDP 不可靠；TCP 丢包会自动重传，UDP 不会。")]),t._v(" "),s("li",[t._v("TCP 有序，UDP 无序；消息在传输过程中可能会乱序，后发送的消息可能会先到达，TCP 会对其进行重排序，UDP 不会。")]),t._v(" "),s("li",[t._v("TCP 无界，UDP 有界；TCP 通过字节流传输，UDP 中每一个包都是单独的。")]),t._v(" "),s("li",[t._v("TCP 有流量控制（拥塞控制），UDP 没有；主要靠三次握手实现。")]),t._v(" "),s("li",[t._v("TCP 传输慢，UDP 传输快；因为 TCP 需要建立连接、保证可靠性和有序性，所以比较耗时。这就是为什么视频流、广播电视、在线多媒体游戏等选择使用 UDP。")]),t._v(" "),s("li",[t._v("TCP 是重量级的，UDP 是轻量级的；TCP 要建立连接、保证可靠性和有序性，就会传输更多的信息，如 TCP 的包头比较大。")]),t._v(" "),s("li",[t._v("TCP 的头部比 UDP 大；TCP 头部需要 20 字节，UDP 头部只要 8 个字节")])])]),t._v(" "),s("li",[t._v("UDP 的应用\n"),s("ul",[s("li",[t._v("域名系统（DNS）")]),t._v(" "),s("li",[t._v("简单网络管理协议（SNMP）")]),t._v(" "),s("li",[t._v("动态主机配置协议（DHCP）")]),t._v(" "),s("li",[t._v("路由信息协议（RIP）")]),t._v(" "),s("li",[t._v("自举协议（BOOTP）")]),t._v(" "),s("li",[t._v("简单文件传输协议（TFTP）")])])])])])])]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_2019-07-04-https-原理-💊✅"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2019-07-04-https-原理-💊✅"}},[t._v("#")]),t._v(" 2019-07-04: HTTPS 原理 💊✅")]),t._v(" "),s("details",[s("summary",[t._v("好好想想先 😌 ")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("参考链接")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://juejin.im/post/59e4c02151882578d02f4aca",target:"_blank",rel:"noopener noreferrer"}},[t._v("谈谈 HTTPS"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.im/post/5e6c4458518825491b11e082",target:"_blank",rel:"noopener noreferrer"}},[t._v("看完这篇 HTTPS，和面试官扯皮就没问题了"),s("OutboundLink")],1)])])]),t._v(" "),s("li",[s("strong",[t._v("一句话")]),t._v(" "),s("ul",[s("li",[t._v("Http 是明文传输的，在 HTTPS 中，使用传输层安全性(TLS)或安全套接字层(SSL)对通信协议进行加密。也就是 HTTP + SSL(TLS) = HTTPS。")]),t._v(" "),s("li",[t._v("HTTPS 协议提供了三个关键的指标\n"),s("ul",[s("li",[t._v("加密(Encryption)， HTTPS 通过对数据加密来使其免受窃听者对数据的监听，这就意味着当用户在浏览网站时，没有人能够监听他和网站之间的信息交换，或者跟踪用户的活动，访问记录等，从而窃取用户信息。")]),t._v(" "),s("li",[t._v("数据一致性(Data integrity)，数据在传输的过程中不会被窃听者所修改，用户发送的数据会完整的传输到服务端，保证用户发的是什么，服务器接收的就是什么。")]),t._v(" "),s("li",[t._v("身份认证(Authentication)，是指确认对方的真实身份，也就是证明你是你（可以比作人脸识别），它可以防止中间人攻击并建立用户信任。")])])]),t._v(" "),s("li",[t._v("TLS(Transport Layer Security) 是 SSL(Secure Socket Layer) 的后续版本，它们是用于在互联网两台计算机之间用于身份验证和加密的一种协议。")]),t._v(" "),s("li",[t._v("对称加密\n"),s("ul",[s("li",[t._v("加密和解密时使用的密钥都是同样的密钥")]),t._v(" "),s("li",[t._v("常用加密算法：DES, AES")])])]),t._v(" "),s("li",[t._v("非对称加密\n"),s("ul",[s("li",[t._v("使用公钥加密的文本只能使用私钥解密。")]),t._v(" "),s("li",[t._v("使用私钥加密的文本也可以使用公钥解密。")]),t._v(" "),s("li",[t._v("公钥不需要具有安全性，因为公钥需要在网络间进行传输，非对称加密可以解决密钥交换的问题。")]),t._v(" "),s("li",[t._v("网站保管私钥，在网上任意分发公钥，你想要登录网站只要用公钥加密就行了，密文只能由私钥持有者才能解密。")]),t._v(" "),s("li",[t._v("常用加密算法：RSA")])])]),t._v(" "),s("li",[t._v("混合加密（TLS）\n"),s("ul",[s("li",[t._v("一端用随机算法生成会话秘钥，并用私钥进行加密返回给另一端")]),t._v(" "),s("li",[t._v("另一端用公钥解密来获取对称秘钥")])])]),t._v(" "),s("li",[t._v("CA 认证\n"),s("ul",[s("li",[t._v("公钥 + 其它信息 -> hash 算法 -> 信息摘要 -> ca 私钥加密 -> 数字签名")]),t._v(" "),s("li",[t._v("数字证书包含公钥 + 其它信息 + 数字签名")])])])])])])]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_2019-07-03-tcp-三次握手和四次挥手-为什么是三次和四次-💊✅"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2019-07-03-tcp-三次握手和四次挥手-为什么是三次和四次-💊✅"}},[t._v("#")]),t._v(" 2019-07-03: TCP 三次握手和四次挥手，为什么是三次和四次 💊✅")]),t._v(" "),s("details",[s("summary",[t._v("好好想想先 😌 ")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("参考链接")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://juejin.im/post/5a7835a46fb9a063606eb801",target:"_blank",rel:"noopener noreferrer"}},[t._v("图解 TCP 三次握手与四次分手"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.im/post/5ccd0dfc6fb9a0324a08bb73",target:"_blank",rel:"noopener noreferrer"}},[t._v("关于三次握手与四次挥手"),s("OutboundLink")],1)])])]),t._v(" "),s("li",[s("strong",[t._v("一句话")]),t._v(" "),s("ul",[s("li",[t._v("三次握手：\n"),s("ul",[s("li",[t._v("1、第一次握手：客户端给服务器发送一个 SYN 报文。")]),t._v(" "),s("li",[t._v("2、第二次握手：服务器收到 SYN 报文之后，会应答一个 SYN+ACK 报文。")]),t._v(" "),s("li",[t._v("3、第三次握手：客户端收到 SYN+ACK 报文之后，会回应一个 ACK 报文。")]),t._v(" "),s("li",[t._v("4、服务器收到 ACK 报文之后，三次握手建立完成。")])])]),t._v(" "),s("li",[t._v("三次握手的作用\n"),s("ul",[s("li",[t._v("确认双方的接受能力、发送能力是否正常。")]),t._v(" "),s("li",[t._v("指定自己的初始化序列号，为后面的可靠传送做准备。")]),t._v(" "),s("li",[t._v("如果是 https 协议的话，三次握手这个过程，还会进行数字证书的验证以及加密密钥的生成。")])])]),t._v(" "),s("li",[t._v("四次挥手\n"),s("ul",[s("li",[t._v("TCP 的连接的拆除需要发送四个包，因此称为四次挥手(four-way handshake)。")]),t._v(" "),s("li",[t._v("客户端或服务器均可主动发起挥手动作，在 socket 编程中，任何一方执行 close()操作即可产生挥手操作。")]),t._v(" "),s("li",[t._v("1、第一次挥手：客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 FIN_WAIT1 状态。")]),t._v(" "),s("li",[t._v("2、第二次握手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 + 1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT 状态。")]),t._v(" "),s("li",[t._v("3、第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态。")]),t._v(" "),s("li",[t._v("4、第四次挥手：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 + 1 作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT 状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态")]),t._v(" "),s("li",[t._v("5、服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态。")])])]),t._v(" "),s("li",[t._v("为什么客户端发送 ACK 之后不直接关闭，而是要等一阵子才关闭。这其中的原因就是，要确保服务器是否已经收到了我们的 ACK 报文，如果没有收到的话，服务器会重新发 FIN 报文给客户端，客户端再次收到 ACK 报文之后，就知道之前的 ACK 报文丢失了，然后再次发送 ACK 报文。")])])])])]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_2019-07-02-网络七层模型与四层模型区别-✅"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2019-07-02-网络七层模型与四层模型区别-✅"}},[t._v("#")]),t._v(" 2019-07-02: 网络七层模型与四层模型区别 ✅")]),t._v(" "),s("details",[s("summary",[t._v("好好想想先 😌 ")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("参考链接")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://juejin.im/post/59a0472f5188251240632f92",target:"_blank",rel:"noopener noreferrer"}},[t._v("网络七层模型与四层模型区别"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.im/post/598ba1d06fb9a03c4d6464ab",target:"_blank",rel:"noopener noreferrer"}},[t._v("关于 TCP/IP，必知必会的十个问题"),s("OutboundLink")],1)])])]),t._v(" "),s("li",[s("strong",[t._v("一句话")]),t._v(" "),s("ul",[s("li",[t._v("OSI 七层网络模型\n"),s("ul",[s("li",[t._v("物理层：底层数据传输，如网线；网卡标准。")]),t._v(" "),s("li",[t._v("数据链路层：定义数据的基本格式，如何传输，如何标识；如网卡 MAC 地址。")]),t._v(" "),s("li",[t._v("网络层：定义 IP 编址，定义路由功能；如不同设备的数据转发。")]),t._v(" "),s("li",[t._v("传输层：端到端传输数据的基本功能；如 TCP、UDP。")]),t._v(" "),s("li",[t._v("会话层：控制应用程序之间会话能力；如不同软件数据分发给不同软件。")]),t._v(" "),s("li",[t._v("标识层：数据格式标识，基本压缩加密功能。")]),t._v(" "),s("li",[t._v("应用层：各种应用软件，包括 Web 应用。")])])]),t._v(" "),s("li",[t._v("基于 TCP/IP 的参考模型将协议分成四个层次，它们分别是链路层、网络层、传输层和应用层。")])])])])]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_2019-07-01-什么是二叉树、二叉查找树、avl-树、红黑树-✅"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2019-07-01-什么是二叉树、二叉查找树、avl-树、红黑树-✅"}},[t._v("#")]),t._v(" 2019-07-01: 什么是二叉树、二叉查找树、AVL 树、红黑树 ✅")]),t._v(" "),s("details",[s("summary",[t._v("好好想想先 😌 ")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("参考链接")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/README.zh-CN.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript 算法与数据结构"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.im/post/5b6316116fb9a04f86064b36",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript 实现简单二叉查找树"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.im/post/5b6b897df265da0fab404318",target:"_blank",rel:"noopener noreferrer"}},[t._v("看图轻松理解数据结构与算法系列(AVL 树)"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.im/post/5a27c6946fb9a04509096248",target:"_blank",rel:"noopener noreferrer"}},[t._v("什么是红黑树"),s("OutboundLink")],1)])])]),t._v(" "),s("li",[s("strong",[t._v("一句话")]),t._v(" "),s("ul",[s("li",[t._v("二叉树：是一个有限元素的集合，该集合或者为空、或者由一个称为根的元素及两个不相交的、被分别称为左子树和右子树的二叉树组成。")]),t._v(" "),s("li",[t._v("二叉查找树：二叉查找树也叫二叉搜索树（BST），它只允许我们在左节点存储比父节点更小的值，右节点存储比父节点更大的值。")]),t._v(" "),s("li",[t._v("AVL 树（平衡二叉查找树）：\n"),s("ul",[s("li",[t._v("AVL 树是一棵二叉搜索树。")]),t._v(" "),s("li",[t._v("AVL 树的左右子节点也是 AVL 树。")]),t._v(" "),s("li",[t._v("AVL 树拥有二叉搜索树的所有基本特点。")]),t._v(" "),s("li",[t._v("每个节点的左右子节点的高度之差的绝对值最多为 1，即平衡因子为范围为[-1,1]。")])])]),t._v(" "),s("li",[t._v("红黑树：\n"),s("ul",[s("li",[t._v("也是平衡的二叉查找树")]),t._v(" "),s("li",[t._v("节点是红色或黑色。")]),t._v(" "),s("li",[t._v("根节点是黑色。")]),t._v(" "),s("li",[t._v("每个叶子节点都是黑色的空节点（NIL 节点）。")]),t._v(" "),s("li",[t._v("每个红色节点的两个子节点都是黑色。(从每个叶子到根的所有路径上不能有两个连续的红色节点)")]),t._v(" "),s("li",[t._v("从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点。")])])])])])])])])}),[],!1,null,null,null);a.default=n.exports}}]);